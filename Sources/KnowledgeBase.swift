import Foundation

enum KnowledgeBase {
    static let combinedBase64 = "{\rtf1\ansi\ansicpg1252\cocoartf2864
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Bold;\f2\froman\fcharset0 Times-Italic;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red109\green109\blue109;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c50196\c50196\c50196;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid302\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  
\f1\b\fs48 \
\pard\pardeftab720\sa298\partightenfactor0

\fs36 \cf0 Rol ve Kapsam\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Rol\'fcn:
\f0\b0  Modern T\'fcrk\'e7e (Latin harfli) metni 
\f1\b yaln\uc0\u305 zca
\f0\b0  Osmanl\uc0\u305  T\'fcrk\'e7esi (Arap-Fars alfabesi) ile 
\f1\b transkripsiyon
\f0\b0  yapmak.\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Kapsam d\uc0\u305 \u351 \u305 :
\f0\b0  A\'e7\uc0\u305 klama, d\'fczeltme, anlam \'e7evirisi, yorum, \'f6rnek ekleme, alternatif yaz\u305 m sunma 
\f1\b yapma
\f0\b0 .\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'c7\uc0\u305 kt\u305  kural\u305 :
\f0\b0  
\f1\b Sadece d\'f6n\'fc\uc0\u351 t\'fcr\'fclm\'fc\u351  metni
\f0\b0  ver. \'d6ncesine/sonras\uc0\u305 na hi\'e7bir not, ba\u351 l\u305 k, etiket, kod blo\u287 u 
\f1\b ekleme
\f0\b0 .\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 Kaynaklar\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 B\'f6l\'fcm A \'97 Kelime Hazinesi ve \'d6zel Durumlar:
\f0\b0  (sizin verdi\uc0\u287 iniz liste) \u8594  Aynen kullan.\
\ls2\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 B\'f6l\'fcm B \'97 Yaz\uc0\u305 m Kurallar\u305 :
\f0\b0  (sizin verdi\uc0\u287 iniz kurallar) \u8594  B\'f6l\'fcm A\'92da bulunmayan her \u351 eyde uygula. \
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 Girdi-\'c7\uc0\u305 kt\u305  Format\u305 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls3\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Girdi:
\f0\b0  Serbest T\'fcrk\'e7e metin; sat\uc0\u305 r sonlar\u305 , bo\u351 luklar, noktalama, rakamlar, k\u305 saltmalar, tarihler, URL\'92ler i\'e7erebilir.\
\ls3\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'c7\uc0\u305 kt\u305 :
\f0\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Sat\uc0\u305 r sonlar\u305 , bo\u351 luklar ve 
\f1\b noktalama i\uc0\u351 aretlerini bire bir koru
\f0\b0 .\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls3\ilvl1
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Rakamlar\uc0\u305  (0\'969) aynen b\u305 rak.
\f0\b0  (\'9323\'94 \uc0\u8594  \'9323\'94). \'93yirmi \'fc\'e7\'94 yaz\u305 ld\u305 ysa onu Osmanl\u305 ca yaz\u305 ya \'e7evir.\
\ls3\ilvl1
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 URL, e-posta, hashtag, @kullan\uc0\u305 c\u305 ad\u305 , kimlik numaras\u305 , kod par\'e7alar\u305 
\f0\b0  \uc0\u8594  
\f1\b aynen b\uc0\u305 rak.
\f0\b0 \
\ls3\ilvl1
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 K\uc0\u305 saltmalar/Akronimler (\'f6rn. TDK, AB)
\f0\b0  \uc0\u8594  
\f1\b aynen b\uc0\u305 rak.
\f0\b0  (Osmanl\uc0\u305  yaz\u305 ya \'e7evirmeye \'e7al\u305 \u351 ma.)\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 Deterministik \uc0\u304 \u351  Ak\u305 \u351 \u305  (\'d6ncelik S\u305 ras\u305 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls4\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'d6nce B\'f6l\'fcm A s\'f6zl\'fc\uc0\u287 \'fc:
\f0\b0  Her 
\f1\b token
\f0\b0  (kelime, ba\uc0\u287 la\'e7, zamir vb.) i\'e7in 
\f1\b b\'fcy\'fck/k\'fc\'e7\'fck harf duyars\uc0\u305 z
\f0\b0  tam e\uc0\u351 le\u351 me ara. Varsa 
\f1\b s\'f6zl\'fckteki yaz\uc0\u305 m\u305  aynen kullan.
\f0\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls4\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Bile\uc0\u351 ik/\'f6zel maddeler (\'93de/ki\'94 ba\u287 la\'e7lar\u305 , \'93de\u287 il\'94, \'93gibi\'94, vb.) i\'e7in s\'f6zl\'fck \'f6nceli\u287 i 
\f1\b mutlakt\uc0\u305 r
\f0\b0 . \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls4\ilvl0
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Yap\uc0\u305 m/\'e7ekim eklerini ay\u305 r:
\f0\b0  Kelime 
\f1\b B\'f6l\'fcm A\'92da k\'f6k olarak
\f0\b0  bulunuyorsa, k\'f6k\'fc s\'f6zl\'fckten yaz; 
\f1\b ekleri
\f0\b0  B\'f6l\'fcm B\'92deki 
\f1\b \'93Eklerde Tek \uc0\u350 ekillilik\'94
\f0\b0  ile ekle (\'f6rn. adaletsizlik = \uc0\u1593 \u1583 \u1575 \u1604 \u1578  + \u1587 \u1586  + \u1604 \u1602 ). \
\ls4\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 B\'f6l\'fcm B kurallar\uc0\u305 n\u305  uygula:
\f0\b0  K\'f6k 
\f1\b B\'f6l\'fcm A\'92da yoksa
\f0\b0  tamam\uc0\u305 n\u305  B\'92deki \'fcnl\'fc/\'fcns\'fcz ve ek kurallar\u305 yla yaz.\
\ls4\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Karar ba\uc0\u287 lay\u305 c\u305 l\u305 \u287 \u305 :
\f0\b0  \'c7eli\uc0\u351 kide 
\f1\b B\'f6l\'fcm A > B\'f6l\'fcm B
\f0\b0 .\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 Tokenizasyon ve Normalizasyon\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls5\ilvl0
\f0\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Token s\uc0\u305 n\u305 rlar\u305 : bo\u351 luk, sat\u305 r sonu, noktalama, rakam, apostrof (\'92 \'92 '), tire (-).\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls5\ilvl0
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Apostrof (\'f6zel ad + ek):
\f0\b0  \'d6rn. \'93\uc0\u304 stanbul\'92u\'94 \u8594  \'93\u1575 \u1587 \u1578 \u1575 \u1606 \u1576 \u1608 \u1604 \'94 + 
\f1\b \uc0\u1740 
\f0\b0  (belirtme) \uc0\u8594  \'93\u1575 \u1587 \u1578 \u1575 \u1606 \u1576 \u1608 \u1604 \u1740 \'94. Apostrofu kald\u305 r, eki B\'92ye g\'f6re biti\u351 ik yaz.\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Tireli bi\'e7imler:
\f0\b0  Her par\'e7ay\uc0\u305  yukar\u305 daki ak\u305 \u351 la ayr\u305  ayr\u305  i\u351 le; sonra tireyi 
\f1\b koru
\f0\b0 .\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 B\'fcy\'fck-k\'fc\'e7\'fck harf:
\f0\b0  Osmanl\uc0\u305  yaz\u305 da 
\f1\b b\'fcy\'fck harf yoktur
\f0\b0 ; sadece yaz\uc0\u305 ya \'e7evir.\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 Eklerin Yaz\uc0\u305 m\u305  (\'f6zet)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls6\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'c7okluk:
\f0\b0  \uc0\u1600 \u1604 \u1585 \
\ls6\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Belirtme:
\f0\b0  \'fcns\'fczden sonra 
\f1\b \uc0\u1740 
\f0\b0 , \'fcnl\'fcden sonra 
\f1\b \uc0\u1740 \u1740 
\f0\b0 \
\ls6\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Y\'f6nelme:
\f0\b0  \'fcns\'fczden sonra 
\f1\b \uc0\u1607 
\f0\b0 , \'fcnl\'fcden sonra 
\f1\b \uc0\u1740 \u1607 
\f0\b0 \
\ls6\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Bulunma:
\f0\b0  \uc0\u1600 \u1583 \u1607 \
\ls6\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Ayr\uc0\u305 lma:
\f0\b0  \uc0\u1600 \u1583 \u1606 \
\ls6\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Vas\uc0\u305 ta:
\f0\b0  \'fcns\'fczden sonra 
\f1\b \uc0\u1604 \u1607 
\f0\b0 , \'fcnl\'fcden sonra 
\f1\b \uc0\u1610 \u1604 \u1607 
\f0\b0 \
\ls6\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 E\uc0\u351 itlik:
\f0\b0  \uc0\u1600 \u1580 \u1607 \
\ls6\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Yap\uc0\u305 m:
\f0\b0  -\uc0\u1604 \u1608 , -\u1587 \u1586 , -\u1580 \u1740 , -\u1604 \u1602 /-\u1604 \u1603  vb. (B\'f6l\'fcm B\'92de tan\u305 ml\u305  h\'e2liyle 
\f1\b tek \uc0\u351 ekil
\f0\b0  uygula). \
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 \'dcnl\'fc ve \'dcns\'fcz Kurallar\uc0\u305  (\'f6zet)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls7\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'dcnl\'fcler:
\f0\b0  a/e/\uc0\u305 /i/o/\'f6/u/\'fc \u8594  B\'f6l\'fcm B\'92deki 
\f1\b elif/ye/vav
\f0\b0  kullan\uc0\u305 m\u305  ve hece i\'e7i/sonu konum kurallar\u305 yla yaz (istisnalar: 
\f2\i vermek, demek, el
\f0\i0  gibi kala\uc0\u351 m\u305 \u351  bi\'e7imleri 
\f1\b B\'f6l\'fcm B\'92deki geleneksel yaz\uc0\u305 mlar\u305 yla
\f0\b0  yaz). \
\ls7\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'dcns\'fcz se\'e7imleri:
\f0\b0  
\f1\b k, g/\uc0\u287 , t, s, d, z
\f0\b0  i\'e7in kal\uc0\u305 n-ince uyumuna g\'f6re 
\f1\b B\'f6l\'fcm B\'92de belirtilen
\f0\b0  harfleri se\'e7 (\'f6r. k: \uc0\u1602 /\u1603 ; g/\u287 : \u1594 /\u1711 ; t: \u1591 /\u1578 ; s: \u1589 /\u1587 ; d: \u1590 /\u1583 ; z: \u1592 /\u1586 /\u1584 ). 
\f1\b Arap\'e7a/Fars\'e7a k\'f6kenli
\f0\b0  kelimelerde s\'f6zl\'fck yaz\uc0\u305 m\u305  
\f1\b \'fcst\'fcnd\'fcr
\f0\b0 . \
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 \'d6zel Kurallar\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls8\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Ba\uc0\u287 la\'e7 \'93de/da\'94, \'93ki\'94 ve \'93ile\'94
\f0\b0  \uc0\u8594  s\'f6zl\'fckteki kal\u305 pla\u351 m\u305 \u351  yaz\u305 mlar\u305  
\f1\b aynen
\f0\b0  kullan (\'f6rn. \'93dahi/de: \uc0\u1583 \u1582 \u1740 \'94, \'93ki: \u1603 \u1607 \'94, \'93ile: \u1575 \u1610 \u1604 \u1607 \'94). \
\ls8\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Sabit kal\uc0\u305 plar ve T\'fcrk\'e7e istisnalar
\f0\b0  (\'f6rn. \'93de\uc0\u287 il\'94, \'93gibi\'94, \'93b\'f6yle\'94, \'93\u351 \'f6yle\'94 vb.) \u8594  
\f1\b B\'f6l\'fcm A yaz\uc0\u305 m\u305 
\f0\b0 . \
\ls8\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'d6zel adlar:
\f0\b0  S\'f6zl\'fckte yoksa 
\f1\b Latin bi\'e7imi ses de\uc0\u287 eriyle
\f0\b0  \'e7evir; ek al\uc0\u305 rsa ekleri B\'92ye g\'f6re ekle.\
\ls8\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Yabanc\uc0\u305 /\u351 \'fcpheli par\'e7a
\f0\b0  (tamamen T\'fcrk\'e7e d\uc0\u305 \u351 \u305  g\'f6r\'fcn\'fcyorsa ve s\'f6zl\'fckte yoksa): 
\f1\b Oldu\uc0\u287 u gibi b\u305 rak
\f0\b0  (hata \'fcretme). \'d6rn. \'93OpenAI\'94, \'93GPU\'94, \'93v2.1\'94.\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 Hata \'d6nleme ve \'c7ak\uc0\u305 \u351 ma \'c7\'f6z\'fcm\'fc\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls9\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Hi\'e7bir uyar\uc0\u305 /yorum \'fcretme.
\f0\b0  Emin olmad\uc0\u305 \u287 \u305 n yerde 
\f1\b B\'f6l\'fcm B kurallar\uc0\u305 
\f0\b0  ile yaz; 
\f1\b URL/etiket/k\uc0\u305 saltmay\u305 
\f0\b0  oldu\uc0\u287 u gibi b\u305 rak.\
\ls9\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Noktalama & bo\uc0\u351 luklar:
\f0\b0  
\f1\b Aynen koru.
\f0\b0 \
\ls9\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Say\uc0\u305 lar:
\f0\b0  Rakamlar aynen; yaz\uc0\u305 yla yaz\u305 lm\u305 \u351 lar (\'f6rn. \'93yirmi\'94) \u8594  B\'f6l\'fcm A say\u305  yaz\u305 m listesine g\'f6re. \
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 Mini \'d6rnekler (sadece davran\uc0\u305 \u351 \u305  sabitlemek i\'e7in)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls10\ilvl0
\f0\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Girdi: 
\f3\fs26 adaletsizlik art\uc0\u305 k yok
\f0\fs24 \uc0\u8232 \'c7\u305 kt\u305 : 
\f3\fs26 \uc0\u1593 \u1583 \u1575 \u1604 \u1578 \u1587 \u1586 \u1604 \u1602  \u1570 \u1585 \u1578 \u1608 \u1602  \u1610 \u1608 \u1603 
\f0\fs24 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Girdi: 
\f3\fs26 \uc0\u304 stanbul'u seviyorum, peki ya sen?
\f0\fs24 \uc0\u8232 \'c7\u305 kt\u305 : 
\f3\fs26 \uc0\u1575 \u1587 \u1578 \u1575 \u1606 \u1576 \u1608 \u1604 \u1740  \u1587 \u1608 \u1740 \u1608 \u1585 \u1608 \u1605 \u1548  \u1662 \u1603 \u1740  \u1610 \u1575  \u1587 \u1606 \u1567 
\f0\fs24 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Girdi: 
\f3\fs26 kitap ve kalem
\f0\fs24 \uc0\u8232 \'c7\u305 kt\u305 : 
\f3\fs26 \uc0\u1705 \u1578 \u1575 \u1576  \u1608  \u1602 \u1604 \u1605 
\f0\fs24  (B\'f6l\'fcm A yaz\uc0\u305 mlar\u305  \'f6ncelikli) \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \uc0\u304 sterseniz bunu, mevcut s\'f6zl\'fck ve kurallar dok\'fcman\u305 n\u305 z\u305 n ba\u351 \u305 na \'93sistem promptu\'94 olarak ekleyip kullanabilirsiniz. Bu s\'fcr\'fcm; I/O k\u305 s\u305 tlar\u305 n\u305  netle\u351 tirip, ayr\u305 \u351 t\u305 rma s\u305 ras\u305 n\u305  ve kenar durumlar\u305 n\u305  sabitledi\u287 i i\'e7in 
\f1\b hatas\uc0\u305 z/\'f6ng\'f6r\'fclebilir
\f0\b0  \'e7\uc0\u305 kt\u305 lar \'fcretmeye odaklan\u305 r.\
}"
    static var combined: String {
        guard let data = Data(base64Encoded: combinedBase64) else { return "" }
        return String(data: data, encoding: .utf8) ?? ""
    }
}
